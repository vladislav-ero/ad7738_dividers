// Содержимое файла main.c

#include "MDR32Fx.h"                    // Device header
#include "MDR32F9Qx_config.h"           // Keil::Device:Startup

// Подключение необходимых библиотечных файлов 
#include <MDR32F9Qx_uart.h> 
#include <MDR32F9Qx_port.h> 
#include <MDR32F9Qx_rst_clk.h> 
// Определение функции задержки 
#define DELAY(T) for (i = T; i > 0; i--) 
int i; // Глобальная переменная счетчика в макроса DELAY() 

// Процедура инициализации порта 
void PortsInit() { 
	// Включение тактирования порта F 
	RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTF, ENABLE); 
	// Объявление структуры для инициализации порта 
	PORT_InitTypeDef Nastroyka; 
	// Инициализация порта B для функции UART 
	// Настройка порта по умолчанию 
	PORT_StructInit(&Nastroyka); 
	// Переопределение функции порта 
	Nastroyka.PORT_FUNC = PORT_FUNC_OVERRID; 
	// Установка короткого фронта 
	Nastroyka.PORT_SPEED = PORT_SPEED_MAXFAST; 
	// Цифровой режим работы вывода 
	Nastroyka.PORT_MODE = PORT_MODE_DIGITAL; 
	// Инициализация вывода PF1 как UART_TX (передача) 
	Nastroyka.PORT_Pin = PORT_Pin_1; 
	Nastroyka.PORT_OE = PORT_OE_OUT; 
	PORT_Init(MDR_PORTF, &Nastroyka); 
	// Инициализация вывода PF0 как UART_RX (прием) 
	Nastroyka.PORT_Pin = PORT_Pin_0; 
	Nastroyka.PORT_OE = PORT_OE_IN; 
	PORT_Init(MDR_PORTF, &Nastroyka); 
} 
// Процедура инициализации контроллера UART 
void UARTInit()
{ 
	// Включение тактирования UART2 
	RST_CLK_PCLKcmd(RST_CLK_PCLK_UART2, ENABLE); 
	// Объявление структуры для инициализации контроллера UART 
	UART_InitTypeDef UART_InitStructure; 
	// Делитель тактовой частоты UART = 1 
	UART_BRGInit(MDR_UART2, UART_HCLKdiv1); 
	// Конфигурация UART 
	// Скорость передачи данных – 115200 бод 
	UART_InitStructure.UART_BaudRate = 115200; 
	// Количество бит в посылке – 8 
	UART_InitStructure.UART_WordLength = UART_WordLength8b; 
	// Один стоп-бит 
	UART_InitStructure.UART_StopBits = UART_StopBits1; 
	// Без проверки четности 
	UART_InitStructure.UART_Parity = UART_Parity_No; 
	// Выключить работу буфера FIFO приемника и передатчика, 
	// т.е. передача осуществляется по одному байту 
	UART_InitStructure.UART_FIFOMode = UART_FIFO_OFF; 
	// Разрешить прием и передачу данных 
	UART_InitStructure.UART_HardwareFlowControl = 
												UART_HardwareFlowControl_RXE 
												| UART_HardwareFlowControl_TXE; 
	// Инициализация UART2 с заданными параметрами
	UART_Init(MDR_UART2, &UART_InitStructure); 
	// Включить сконфигурированный UART 
	UART_Cmd(MDR_UART2, ENABLE); 
} 

// Объявление главной функции 
int main(void) 
{ 
	PortsInit(); 
	// Вызов функции инициализации порта 
	UARTInit(); 
	// Вызов функции инициализации UART 
	// Бесконечный цикл 
	while (1)
	{
		UART_SendData(MDR_UART2, 'U');
		UART_SendData(MDR_UART2, 'A');
		UART_SendData(MDR_UART2, 'R');
		UART_SendData(MDR_UART2, 'T');
		UART_SendData(MDR_UART2, '\n');
		UART_SendData(MDR_UART2, '\r');
	}
}

